{"version":3,"sources":["components/Month.module.css","components/Monthlist.module.css","components/Month.js","components/MonthsList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Month","props","currentColor","users","length","id","month","onMouseEnter","mouseEnter","onMouseLeave","mouseLeave","className","styles","single_month","style","backgroundColor","MonthsList","state","usersByMonth","userList","bind","usersArray","axios","get","then","response","data","catch","error","Error","months","i","this","setState","forEach","elem","Date","dob","getMonth","push","e","target","map","el","ind","key","firstName","lastName","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,aAAe,8B,mBCAjCD,EAAOC,QAAU,CAAC,SAAW,8B,yQCyCdC,EAvCD,SAACC,GACX,IAAIC,EAwBJ,OARIA,EADAD,EAAME,MAAMC,QAAU,EACP,OACRH,EAAME,MAAMC,QAAU,EACd,OACRH,EAAME,MAAMC,QAAU,GACd,QAEA,MAGf,yBACIC,GAAIJ,EAAMK,MACVC,aAAcN,EAAMO,WACpBC,aAAcR,EAAMS,WACpBC,UAAWC,IAAOC,aAClBC,MAAO,CAAEC,gBAAiBb,IAE1B,2BA/BK,CACT,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAmBeD,EAAMK,QAPrB,IAOiC,6BAC5BL,EAAME,MAAMC,OARjB,W,iBC2DOY,E,kDAlFX,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IACDgB,MAAQ,CACTd,MAAO,GACPe,aAAc,GACdC,SAAU,IAEd,EAAKX,WAAa,EAAKA,WAAWY,KAAhB,gBAClB,EAAKV,WAAa,EAAKA,WAAWU,KAAhB,gBARH,E,2LAYXC,EAAa,G,SAEXC,IACDC,IACG,kEAEHC,MAAK,SAAUC,GACZJ,EAAaI,EAASC,QAEzBC,OAAM,SAAUC,GACb,MAAM,IAAIC,MAAM,2B,OAKxB,IADIC,EAAS,GACJC,EAAI,EAAGA,EAAI,GAAIA,IACpBD,EAAOC,GAAK,GAEhBC,KAAKC,SAAS,CAAE9B,MAAOkB,IAGvBW,KAAKf,MAAMd,MAAM+B,SAAQ,SAACC,GACtBA,EAAK7B,MAAQ,IAAI8B,KAAKD,EAAKE,KAAKC,WAChCR,EAAOK,EAAK7B,OAAOiC,KAAKJ,MAE5BH,KAAKC,SAAS,CAAEf,aAAcY,I,uIAEvBU,GACHA,EAAEC,OAAOpC,IACT2B,KAAKC,SAAS,CAAEd,SAAUa,KAAKf,MAAMC,aAAasB,EAAEC,OAAOpC,Q,mCAK/D2B,KAAKC,SAAS,CAAEd,SAAU,O,+BAGpB,IAAD,OACL,OACI,6BACI,yBAAKR,UAAU,eACVqB,KAAKf,MAAMC,aAAawB,KAAI,SAACC,EAAIC,GAC9B,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLzC,MAAOwC,EACPrC,MAAOsC,EACPpC,WAAY,EAAKA,WACjBE,WAAY,EAAKA,iBAKjC,yBAAKC,UAAWC,IAAOO,UACnB,uOACA,4BACKa,KAAKf,MAAME,SAASuB,KAAI,SAACC,EAAIC,GAC1B,OACI,wBAAIC,IAAKD,GAAT,OACSD,EAAGtC,GADZ,KACkBsC,EAAGG,UADrB,IACiCH,EAAGI,oB,GAxE3CC,IAAMC,WCWhBC,MAZf,WACI,OACI,yBAAKvC,UAAU,OACX,8IACyB,wDAEzB,+IACA,kBAAC,EAAD,QCCQwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdtC,OAAM,SAAAC,GACLsC,QAAQtC,MAAMA,EAAMuC,c","file":"static/js/main.6cfde3f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"single_month\":\"Month_single_month__1no4J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userList\":\"Monthlist_userList__uQL0J\"};","import React from \"react\";\r\nimport styles from \"./Month.module.css\";\r\n\r\nconst Month = (props) => {\r\n    let currentColor;\r\n    let months = [\r\n        \"January\",\r\n        \"February\",\r\n        \"March\",\r\n        \"April\",\r\n        \"May\",\r\n        \"June\",\r\n        \"July\",\r\n        \"August\",\r\n        \"September\",\r\n        \"October\",\r\n        \"November\",\r\n        \"December\",\r\n    ];\r\n    if (props.users.length <= 2) {\r\n        currentColor = \"grey\";\r\n    } else if (props.users.length <= 6) {\r\n        currentColor = \"blue\";\r\n    } else if (props.users.length <= 10) {\r\n        currentColor = \"green\";\r\n    } else {\r\n        currentColor = \"red\";\r\n    }\r\n    return (\r\n        <div\r\n            id={props.month}\r\n            onMouseEnter={props.mouseEnter}\r\n            onMouseLeave={props.mouseLeave}\r\n            className={styles.single_month}\r\n            style={{ backgroundColor: currentColor }}\r\n        >\r\n            <b>{months[props.month]}</b> <br />\r\n            {props.users.length} users\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Month;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Month from \"./Month\";\r\nimport styles from \"./Monthlist.module.css\";\r\n\r\nclass MonthsList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: [],\r\n            usersByMonth: [],\r\n            userList: [],\r\n        };\r\n        this.mouseEnter = this.mouseEnter.bind(this);\r\n        this.mouseLeave = this.mouseLeave.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let usersArray = [];\r\n        // Получаем всех пользователей и записываем во временную переменную\r\n        await axios\r\n            .get(\r\n                \"https://yalantis-react-school-api.yalantis.com/api/task0/users\"\r\n            )\r\n            .then(function (response) {\r\n                usersArray = response.data;\r\n            })\r\n            .catch(function (error) {\r\n                throw new Error(\"Error with Users API\");\r\n            });\r\n\r\n        // Создаем массив с месяцами (0 - январь, 1 - февраль и тд.)\r\n        let months = [];\r\n        for (let i = 0; i < 12; i++) {\r\n            months[i] = [];\r\n        }\r\n        this.setState({ users: usersArray });\r\n\r\n        // Добавляем в массив с масяцами пользователей\r\n        this.state.users.forEach((elem) => {\r\n            elem.month = new Date(elem.dob).getMonth();\r\n            months[elem.month].push(elem);\r\n        });\r\n        this.setState({ usersByMonth: months });\r\n    }\r\n    mouseEnter(e) {\r\n        if (e.target.id) {\r\n            this.setState({ userList: this.state.usersByMonth[e.target.id] });\r\n        }\r\n    }\r\n\r\n    mouseLeave() {\r\n        this.setState({ userList: [] });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"months_list\">\r\n                    {this.state.usersByMonth.map((el, ind) => {\r\n                        return (\r\n                            <Month\r\n                                key={ind}\r\n                                users={el}\r\n                                month={ind}\r\n                                mouseEnter={this.mouseEnter}\r\n                                mouseLeave={this.mouseLeave}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n                <div className={styles.userList}>\r\n                    <p>Люди, які народилися у обраному місяці: </p>\r\n                    <ol>\r\n                        {this.state.userList.map((el, ind) => {\r\n                            return (\r\n                                <li key={ind}>\r\n                                    ID: {el.id}. {el.firstName} {el.lastName}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MonthsList;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport MonthsList from \"./components/MonthsList\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>\r\n                Тестове завдання для <b>Yalantis React.js School</b>\r\n            </h1>\r\n            <h2>Виконав: Антон Снігур</h2>\r\n            <MonthsList />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}